# SPDX-FileCopyrightText: 2023 Dennis Gl√§ser <dennis.glaeser@iws.uni-stuttgart.de>
# SPDX-License-Identifier: GPL-3.0-or-later

stages:
  - checks
  - test
  - reporting
  - coverage
  - documentation
  - pages
  - deploy
  - release

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: '$CI_COMMIT_BRANCH =~ /^(main|releases\/)/'

default:
  image: python:3.10

cache:
  paths:
    - .cache/pip

.regular_job_rules:
  rules:
    - if: $FIELDCOMPARE_RELEASE_VERSION
      when: never
    - when: on_success

.deploy_job_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $FIELDCOMPARE_RELEASE_VERSION == null'

.release_job_rules:
  rules:
    - if: '$FIELDCOMPARE_RELEASE_VERSION =~ /^([0-9]{1,2}.)?([0-9]{1,2}.)?([0-9]+)?(-.*)?$/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && ( $CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "trigger" )'

.install_dependencies:
  extends: .regular_job_rules
  before_script:
      - python --version
      - pip install --upgrade pip
      - pip install tox

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PY_VERSION: "3.10"

checks:
  stage: checks
  image: python:$PY_VERSION
  script:
    - py_fieldcompare_version=$(grep -m 1 "version" pyproject.toml | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f3)
    - cff_fieldcompare_version=$(grep -m 1 "^version" CITATION.cff | tr -s ' ' | tr -d '"' | tr -d "'" | cut -d' ' -f2)
    - |
      if [[ "$py_fieldcompare_version" != "$cff_fieldcompare_version" ]]; then
          echo "Version string in pyproject.toml and CITATION.cff is not matching. Did you forget updating?"
          exit 1
      fi

test:
  stage: test
  extends: .install_dependencies
  image: python:$PY_VERSION
  artifacts:
    reports:
      junit: test_report.xml
  script:
    # TODO: simplify again and turn 3.10.4 -> 3.10 (once the mypy error with numpy is fixed)
    - env=${PY_VERSION//./}
    - tox -e py${env:0:3}
  parallel:
    matrix:
      - PY_VERSION: ["3.8", "3.9", "3.10.4"]

file_mode_junit_report:
  stage: reporting
  extends: .install_dependencies
  image: python:3.10
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install .
    - fieldcompare file test/data/test_mesh.vtu test/data/test_mesh.vtu --exclude-fields "function" --junit-xml file_mode_junit.xml
  artifacts:
    reports:
      junit: file_mode_junit.xml

dir_mode_junit_report:
  stage: reporting
  extends: .install_dependencies
  image: python:3.10
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install .
    - fieldcompare dir test/data/ test/data/ --include-files "*.vtu" --junit-xml dir_mode_junit.xml
  artifacts:
    reports:
      junit: dir_mode_junit.xml

test_coverage_report:
  stage: coverage
  extends: .install_dependencies
  script:
    - tox -e coverage
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - cov_report
    expire_in: 30 minutes

build_docs:
  stage: documentation
  extends: .install_dependencies
  script:
    - pip install sphinx sphinx-mdinclude pydata-sphinx-theme -r requirements.txt
    - cd docs
    - sphinx-apidoc -f -o build ../
    - make html
  artifacts:
    paths:
      - docs/build
    expire_in: 30 minutes

pages:
  stage: pages
  extends: .deploy_job_rules
  needs:
    - job: test_coverage_report
      artifacts: true
    - job: build_docs
      artifacts: true
  script:
    - mkdir -p public/coverage
    - mv cov_report/* public/coverage/
    - mv docs/build/html/* public/
  artifacts:
    paths:
      - public
    expire_in: 30 minutes

pypi:
  stage: deploy
  extends: .deploy_job_rules
  script:
    - echo "Check if fieldcompare version increased since the last release tag..."
    - |
      python -m pip install .
      python -c "import fieldcompare; print(fieldcompare.__version__)" > current_fieldcompare_version.txt
      echo "Current version: $(cat current_fieldcompare_version.txt)"
      python -m pip uninstall --yes fieldcompare
    - git fetch --tags
    - git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
    - git status
    - |
      python -m pip install .
      python -c "import fieldcompare; print(fieldcompare.__version__)" > old_fieldcompare_version.txt
      echo "Last tag: $(cat old_fieldcompare_version.txt)"
      python -m pip uninstall --yes fieldcompare
    - git checkout $CI_COMMIT_SHA
    - |
      if ! cmp -s current_fieldcompare_version.txt old_fieldcompare_version.txt; then
          FIELDCOMPARE_RELEASE_VERSION=$(cat current_fieldcompare_version.txt | xargs echo)
          if [[ "$FIELDCOMPARE_RELEASE_VERSION" =~ ^([0-9]{1,2}.)?([0-9]{1,2}.)?([0-9]+)?(-.*)?$ ]]; then
              echo "Build fieldcompare package and upload to PyPI..."
              python -m pip install --upgrade build twine
              python -m build
              python -m twine upload dist/*
              echo "Trigger release tag $FIELDCOMPARE_RELEASE_VERSION"
              curl --request POST --retry 2 \
                                  --form "token=$CI_JOB_TOKEN" \
                                  --form "ref=$CI_COMMIT_BRANCH" \
                                  --form "variables[FIELDCOMPARE_RELEASE_VERSION]=$FIELDCOMPARE_RELEASE_VERSION" \
                                  "https://gitlab.com/api/v4/projects/32838547/trigger/pipeline"
          else
              echo "Version string $FIELDCOMPARE_RELEASE_VERSION is not a valid version. Refusing to deploy."
          fi
      else
          echo "Version is still the same. Skipping deployment."
      fi
  when: on_success

release_check:
  stage: release
  extends: .release_job_rules
  script:
    - echo $FIELDCOMPARE_RELEASE_VERSION > release_version.txt
    - python -m pip install -e .
    - python -c "import fieldcompare; print(fieldcompare.__version__)" > fieldcompare_version.txt
    - |
      if ! cmp -s fieldcompare_version.txt release_version.txt; then
          echo "Release version does not match fieldcompare version. Aborting release."
          exit 1
      fi

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends: .release_job_rules
  needs: ["release_check"]
  script:
    - echo "Releasing fieldcompare version $FIELDCOMPARE_RELEASE_VERSION"
  release:
    tag_name: "$FIELDCOMPARE_RELEASE_VERSION"
    description: "fieldcompare release $FIELDCOMPARE_RELEASE_VERSION"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: 'Python package on PyPI'
          url: 'https://pypi.org/project/fieldcompare/$FIELDCOMPARE_RELEASE_VERSION/'
